"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activeWsConnections = exports.sessionEndHandler = exports.sessionStartHandler = void 0;
// Store active session contexts and connections
const activeSessionContexts = new Map();
const activeWsConnections = new Map();
exports.activeWsConnections = activeWsConnections;
/**
 * Session start handler
 *
 * Message sent to the skill at the start of the session, can be useful
 * to do processing or caching on a per-session basis.
 */
const sessionStartHandler = async (connection, message) => {
    const sessionId = message.sessionId;
    if (!sessionId) {
        throw new Error('Session ID is required');
    }
    // Send welcome message
    const welcomeResponse = {
        text: 'Welcome to your mock interview session! I\'ll be your interviewer today.',
        meta: { endConversation: false }
    };
    await connection.send('skillConversation', welcomeResponse);
};
exports.sessionStartHandler = sessionStartHandler;
/**
 * Session end handler
 *
 * Message sent to the skill at the end of the session, can be useful
 * to clean up session resources or do end-of-session processing
 */
const sessionEndHandler = async (connection, message) => {
    const sessionId = message.sessionId;
    if (!sessionId) {
        throw new Error('Session ID is required');
    }
    // Send farewell message
    const response = {
        text: 'Thank you for participating in this mock interview session. Goodbye!',
        meta: { endConversation: true }
    };
    await connection.send('skillConversation', response);
};
exports.sessionEndHandler = sessionEndHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBT0EsZ0RBQWdEO0FBQ2hELE1BQU0scUJBQXFCLEdBQUcsSUFBSSxHQUFHLEVBQTRCLENBQUM7QUFDbEUsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLEdBQUcsRUFBaUMsQ0FBQztBQW1ENUQsa0RBQW1CO0FBM0M1Qjs7Ozs7R0FLRztBQUNJLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxFQUFFLFVBQXNCLEVBQUUsT0FBWSxFQUFFLEVBQUU7SUFDaEYsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUNwQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDZixNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELHVCQUF1QjtJQUN2QixNQUFNLGVBQWUsR0FBRztRQUN0QixJQUFJLEVBQUUsMEVBQTBFO1FBQ2hGLElBQUksRUFBRSxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUU7S0FDakMsQ0FBQztJQUVGLE1BQU0sVUFBVSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUM5RCxDQUFDLENBQUM7QUFiVyxRQUFBLG1CQUFtQix1QkFhOUI7QUFFRjs7Ozs7R0FLRztBQUNJLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxFQUFFLFVBQXNCLEVBQUUsT0FBWSxFQUFFLEVBQUU7SUFDOUUsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUNwQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDZixNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELHdCQUF3QjtJQUN4QixNQUFNLFFBQVEsR0FBRztRQUNmLElBQUksRUFBRSxzRUFBc0U7UUFDNUUsSUFBSSxFQUFFLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRTtLQUNoQyxDQUFDO0lBRUYsTUFBTSxVQUFVLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZELENBQUMsQ0FBQztBQWJXLFFBQUEsaUJBQWlCLHFCQWE1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFNlc3Npb25TdGFydE1lc3NhZ2UsXG4gIFNlc3Npb25FbmRNZXNzYWdlLFxufSBmcm9tICdAc291bG1hY2hpbmVzL3Ntc2tpbGxzZGsnO1xuaW1wb3J0IHsgQ29ubmVjdGlvbiB9IGZyb20gJy4uLy4uL3V0aWxzL3dzX2Nvbm5lY3Rpb24nO1xuaW1wb3J0IHsgc2Vzc2lvbkNvbnRleHRzLCBJbnRlcnZpZXdDb250ZXh0LCBnZXRDb250ZXh0LCBzdG9yZUNvbnRleHQsIGNsZWFyQ29udGV4dCB9IGZyb20gJy4uLy4uL2FwcC9zZXNzaW9uX3N0b3JlJztcblxuLy8gU3RvcmUgYWN0aXZlIHNlc3Npb24gY29udGV4dHMgYW5kIGNvbm5lY3Rpb25zXG5jb25zdCBhY3RpdmVTZXNzaW9uQ29udGV4dHMgPSBuZXcgTWFwPHN0cmluZywgSW50ZXJ2aWV3Q29udGV4dD4oKTtcbmNvbnN0IGFjdGl2ZVdzQ29ubmVjdGlvbnMgPSBuZXcgTWFwPHN0cmluZywgQ29ubmVjdGlvbldpdGhDb250ZXh0PigpO1xuXG5pbnRlcmZhY2UgQ29ubmVjdGlvbldpdGhDb250ZXh0IGV4dGVuZHMgQ29ubmVjdGlvbiB7XG4gIGNvbnRleHQ/OiBJbnRlcnZpZXdDb250ZXh0O1xuICBpbnRlcnZpZXdTdGFnZT86IHN0cmluZztcbiAgc2Vzc2lvbklkPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFNlc3Npb24gc3RhcnQgaGFuZGxlclxuICpcbiAqIE1lc3NhZ2Ugc2VudCB0byB0aGUgc2tpbGwgYXQgdGhlIHN0YXJ0IG9mIHRoZSBzZXNzaW9uLCBjYW4gYmUgdXNlZnVsXG4gKiB0byBkbyBwcm9jZXNzaW5nIG9yIGNhY2hpbmcgb24gYSBwZXItc2Vzc2lvbiBiYXNpcy5cbiAqL1xuZXhwb3J0IGNvbnN0IHNlc3Npb25TdGFydEhhbmRsZXIgPSBhc3luYyAoY29ubmVjdGlvbjogQ29ubmVjdGlvbiwgbWVzc2FnZTogYW55KSA9PiB7XG4gIGNvbnN0IHNlc3Npb25JZCA9IG1lc3NhZ2Uuc2Vzc2lvbklkO1xuICBpZiAoIXNlc3Npb25JZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2Vzc2lvbiBJRCBpcyByZXF1aXJlZCcpO1xuICB9XG5cbiAgLy8gU2VuZCB3ZWxjb21lIG1lc3NhZ2VcbiAgY29uc3Qgd2VsY29tZVJlc3BvbnNlID0ge1xuICAgIHRleHQ6ICdXZWxjb21lIHRvIHlvdXIgbW9jayBpbnRlcnZpZXcgc2Vzc2lvbiEgSVxcJ2xsIGJlIHlvdXIgaW50ZXJ2aWV3ZXIgdG9kYXkuJyxcbiAgICBtZXRhOiB7IGVuZENvbnZlcnNhdGlvbjogZmFsc2UgfVxuICB9O1xuXG4gIGF3YWl0IGNvbm5lY3Rpb24uc2VuZCgnc2tpbGxDb252ZXJzYXRpb24nLCB3ZWxjb21lUmVzcG9uc2UpO1xufTtcblxuLyoqXG4gKiBTZXNzaW9uIGVuZCBoYW5kbGVyXG4gKlxuICogTWVzc2FnZSBzZW50IHRvIHRoZSBza2lsbCBhdCB0aGUgZW5kIG9mIHRoZSBzZXNzaW9uLCBjYW4gYmUgdXNlZnVsXG4gKiB0byBjbGVhbiB1cCBzZXNzaW9uIHJlc291cmNlcyBvciBkbyBlbmQtb2Ytc2Vzc2lvbiBwcm9jZXNzaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBzZXNzaW9uRW5kSGFuZGxlciA9IGFzeW5jIChjb25uZWN0aW9uOiBDb25uZWN0aW9uLCBtZXNzYWdlOiBhbnkpID0+IHtcbiAgY29uc3Qgc2Vzc2lvbklkID0gbWVzc2FnZS5zZXNzaW9uSWQ7XG4gIGlmICghc2Vzc2lvbklkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXNzaW9uIElEIGlzIHJlcXVpcmVkJyk7XG4gIH1cblxuICAvLyBTZW5kIGZhcmV3ZWxsIG1lc3NhZ2VcbiAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgdGV4dDogJ1RoYW5rIHlvdSBmb3IgcGFydGljaXBhdGluZyBpbiB0aGlzIG1vY2sgaW50ZXJ2aWV3IHNlc3Npb24uIEdvb2RieWUhJyxcbiAgICBtZXRhOiB7IGVuZENvbnZlcnNhdGlvbjogdHJ1ZSB9XG4gIH07XG5cbiAgYXdhaXQgY29ubmVjdGlvbi5zZW5kKCdza2lsbENvbnZlcnNhdGlvbicsIHJlc3BvbnNlKTtcbn07XG5cbi8vIEV4cG9ydCB0aGUgYWN0aXZlV3NDb25uZWN0aW9ucyBtYXAgZm9yIHVzZSBpbiBvdGhlciBoYW5kbGVyc1xuZXhwb3J0IHsgYWN0aXZlV3NDb25uZWN0aW9ucyB9O1xuIl19