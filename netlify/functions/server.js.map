{"version":3,"file":"server.js","sourceRoot":"","sources":["server.ts"],"names":[],"mappings":"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","sourcesContent":["import { Handler, HandlerContext, HandlerResponse } from '@netlify/functions';\nimport express, { Request, Response } from 'express';\nimport expressWs from 'express-ws';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\n\n// Import routes after they are built\nconst restRoutes = require('../../dist/app/rest_routes').default;\nconst wsRoutes = require('../../dist/app/ws_routes').default;\n\nconst app = express();\nexpressWs(app);\n\n// Enable CORS for all routes\napp.use(cors({\n  origin: '*', // Allow all origins in production\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'x-session-id'],\n  credentials: true\n}));\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\napp.use(restRoutes);\napp.use(wsRoutes);\n\n// Create a serverless handler\nconst handler: Handler = async (event, context: HandlerContext): Promise<HandlerResponse> => {\n  return new Promise((resolve, reject) => {\n    const server = app.listen(0, () => {\n      const { port } = server.address() as { port: number };\n      \n      // Create a mock request object that matches Express's Request interface\n      const mockRequest = {\n        method: event.httpMethod,\n        url: event.path,\n        headers: event.headers,\n        body: event.body,\n        // Add required Express Request methods\n        get: (header: string) => event.headers[header.toLowerCase()],\n        header: (header: string) => event.headers[header.toLowerCase()],\n        accepts: () => true,\n        acceptsCharsets: () => true,\n        acceptsEncodings: () => true,\n        acceptsLanguages: () => true,\n        param: () => '',\n        is: () => false,\n        protocol: 'https',\n        secure: true,\n        ip: '',\n        ips: [],\n        subdomains: [],\n        path: event.path,\n        hostname: '',\n        host: '',\n        fresh: false,\n        stale: true,\n        xhr: false,\n        cookies: {},\n        signedCookies: {},\n        secret: undefined,\n        query: {},\n        route: {},\n        originalUrl: event.path,\n        baseUrl: '',\n        params: {},\n        app: app,\n        res: {} as Response,\n        next: () => {},\n      } as unknown as Request;\n\n      const mockResponse = {\n        statusCode: 200,\n        headers: {},\n        body: '',\n        setHeader: (name: string, value: string) => {},\n        end: (body: string) => {\n          server.close();\n          resolve({\n            statusCode: 200,\n            body,\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          });\n        },\n      } as unknown as Response;\n\n      app(mockRequest, mockResponse);\n    });\n  });\n};\n\nexport { handler }; "]}